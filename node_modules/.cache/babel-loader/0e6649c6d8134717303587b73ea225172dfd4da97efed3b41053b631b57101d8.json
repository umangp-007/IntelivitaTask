{"ast":null,"code":"var _jsxFileName = \"/home/mohan-muthanna/Desktop/Umang/perctical/src/components/RecordForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { recordsState } from '../recoil/atom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordForm = () => {\n  _s();\n  const [records, setRecords] = useRecoilState(recordsState);\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = e => {\n      const jsonData = JSON.parse(e.target.result);\n      const existingEmails = new Set(records.map(record => record.email));\n      const mergedRecords = [...records];\n      jsonData.forEach(record => {\n        if (!existingEmails.has(record.email)) {\n          mergedRecords.push(record);\n          existingEmails.add(record.email);\n        }\n      });\n      setRecords(mergedRecords);\n    };\n    if (file) {\n      reader.readAsText(file);\n    }\n  };\n  const handleUpdateRecord = id => {\n    debugger;\n    const emailExists = records.some(record => record.email === email && record.id !== id);\n    if (emailExists) {\n      alert(\"Email must be unique!\");\n      return;\n    }\n    setRecords(records.map(record => record.id === id ? {\n      ...record,\n      email,\n      name\n    } : record));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".json\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Name\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateRecord,\n        children: \"Update Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(RecordForm, \"Z9ypkFl25irBLAe8KiTL503TD+w=\", false, function () {\n  return [useRecoilState];\n});\n_c = RecordForm;\nexport default RecordForm;\nvar _c;\n$RefreshReg$(_c, \"RecordForm\");","map":{"version":3,"names":["React","useState","useRecoilState","recordsState","jsxDEV","_jsxDEV","RecordForm","_s","records","setRecords","email","setEmail","name","setName","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","jsonData","JSON","parse","result","existingEmails","Set","map","record","mergedRecords","forEach","has","push","add","readAsText","handleUpdateRecord","id","emailExists","some","alert","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onClick","_c","$RefreshReg$"],"sources":["/home/mohan-muthanna/Desktop/Umang/perctical/src/components/RecordForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { recordsState } from '../recoil/atom';\n\nconst RecordForm = () => {\n  const [records, setRecords] = useRecoilState(recordsState);\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  \n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = (e) => {\n      const jsonData = JSON.parse(e.target.result);\n      const existingEmails = new Set(records.map(record => record.email));\n      const mergedRecords = [...records]; \n\n      jsonData.forEach(record => {\n        if (!existingEmails.has(record.email)) {\n          mergedRecords.push(record);\n          existingEmails.add(record.email); \n        }\n      });\n\n      setRecords(mergedRecords);\n    };\n\n    if (file) {\n      reader.readAsText(file);\n    }\n  };\n\n\n  const handleUpdateRecord = (id) => {\n    debugger\n    const emailExists = records.some(record => record.email === email && record.id !== id);\n    if (emailExists) {\n      alert(\"Email must be unique!\");\n      return;\n    }\n    setRecords(records.map(record => record.id === id ? { ...record, email, name } : record));\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".json\" onChange={handleFileUpload} />\n      <div>\n        <input \n          type=\"text\" \n          placeholder=\"Name\" \n          value={name} \n          onChange={(e) => setName(e.target.value)} \n        />\n        <input \n          type=\"email\" \n          placeholder=\"Email\" \n          value={email} \n          onChange={(e) => setEmail(e.target.value)} \n        />\n        <button onClick={handleUpdateRecord}>Update Record</button>\n      </div>\n    </div>\n  );\n};\n\nexport default RecordForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}